import { Meta } from '@storybook/react';
import React from 'react';
import { Provider } from 'react-redux';
import { TransactionData } from './transaction-data';
import { genUnapprovedContractInteractionConfirmation } from '../../../../../../../../test/data/confirmations/contract-interaction';
import configureStore from '../../../../../../../store/store';
import mockState from '../../../../../../../../test/data/mock-state.json';
import { TransactionMeta } from '@metamask/transaction-controller';

const DATA_UNISWAP_MOCK =
  '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006679b4bb00000000000000000000000000000000000000000000000000000000000000040b000604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000000000000000000000000004c41800000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000027213e28d7fda5c57fe9e5dd923818dbccf71c4700000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000004c418';

const DATA_SOURCIFY_MOCK =
  '0xb7b72899000000000000000000000000b0da5965d43369968574d399dbe6374683773a650000000000000000000000000000000000000000000000000000000000000123000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000020456000000000000000000000000000000000000000000000000000000000000';

const DATA_FOUR_BYTE_MOCK =
  '0xb7b72899000000000000000000000000b0da5965d43369968574d399dbe6374683773a650000000000000000000000000000000000000000000000000000000000000123000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000020456000000000000000000000000000000000000000000000000000000000000';

const DATA_RAW_MOCK =
  '0x12345678000000000000000000000000b0da5965d43369968574d399dbe6374683773a650000000000000000000000000000000000000000000000000000000000000123000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000020456000000000000000000000000000000000000000000000000000000000000';

function getStore(transactionData: string, to?: string) {
  const confirmationTemplate = genUnapprovedContractInteractionConfirmation({
    address: '0x43506849d7c04f9138d1a2050bbf3a0c054402dd',
    txData: transactionData,
  }) as TransactionMeta;

  const confirmation = {
    ...confirmationTemplate,
    chainId: '0x1',
    txParams: {
      ...confirmationTemplate.txParams,
      to: to ?? '0x43506849d7c04f9138d1a2050bbf3a0c054402dd',
    },
  };

  return configureStore({
    metamask: {
      ...mockState.metamask,
      preferences: {
        ...mockState.metamask.preferences,
        petnamesEnabled: true,
      },
      knownMethodData: {
        '0xb7b72899': {
          name: 'cancelAuthorization',
          params: [{ type: 'address' }, { type: 'bytes32' }, { type: 'bytes' }],
        },
      },
    },
    confirm: {
      currentConfirmation: confirmation,
    },
  });
}

function Template({
  transactionData,
  to,
}: {
  transactionData: string;
  to?: string;
}) {
  return (
    <Provider store={getStore(transactionData, to)}>
      <div
        style={{
          backgroundColor: 'var(--color-background-alternative)',
          padding: 30,
        }}
      >
        <TransactionData />
      </div>
    </Provider>
  );
}

export default {
  title: 'Components/App/Confirm/Info/Shared/TransactionData',
  component: TransactionData,
  decorators: [(story: () => Meta<typeof TransactionData>) => story()],
};

export const UniswapStory = () =>
  Template({ transactionData: DATA_UNISWAP_MOCK });

UniswapStory.storyName = 'Uniswap';

export const SourcifyStory = () =>
  Template({ transactionData: DATA_SOURCIFY_MOCK });

SourcifyStory.storyName = 'Sourcify';

export const FourByteStory = () =>
  Template({
    transactionData: DATA_FOUR_BYTE_MOCK,
    to: '0x33506849d7c04f9138d1a2050bbf3a0c054402dd',
  });

FourByteStory.storyName = 'Four Byte';

export const RawStory = () =>
  Template({
    transactionData: DATA_RAW_MOCK,
  });

RawStory.storyName = 'Raw';
